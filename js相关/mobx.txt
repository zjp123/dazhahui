核心概念：
Observable state(可观察的状态)
Computed values(计算值)
Reactions(反应)
Actions(动作)  


使用 MobX， 你可以定义在相关数据发生变化时自动更新的值。 通过@computed 装饰器或者利用 (extend)Observable 时调用 的getter / setter 函数来进行使用。(当然，这里也可以再次使用 decorate来替代 @ 语法)。  —它们是一个意思

Reactions(反应)它并不是具体的函数或者语法，它只是一个文字描述，一个文案称呼。它把某一类的行为都叫做反应，比如：Reactions 和计算值很像，但它不是产生一个新的值，而是会产生一些副作用，比如打印到控制台、网络请求、递增地更新 React 组件树以修补DOM、等等
自定义 reactions
使用autorun、reaction 和 when 函数即可简单的创建自定义 reactions，以满足你的具体场景。

    

原则
MobX 支持单向数据流，也就是动作改变状态，而状态的改变会更新所有受影响的视图。

当状态改变时，所有衍生都会进行原子级的自动更新。因此永远不可能观察到中间值。
所有衍生默认都是同步更新。这意味着例如动作可以在改变状态之后直接可以安全地检查计算值。
计算值 是延迟更新的。任何不在使用状态的计算值将不会更新，直到需要它进行副作用（I / O）操作时。 如果视图不再使用，那么它会自动被垃圾回收。
所有的计算值都应该是纯净的。它们不应该用来改变状态。

observable(value)与@observable property = value是等价的，只不过装饰器的写法更强大些，因为它会把原始类型的值也会转为可观察，就像observable.box(value)如：var a  = observable.box(0) a的返回值是通过proxy包装后的。跟observable直接转的不一样。

@observable property = value
observable 也可以用作属性的装饰器。它需要启用装饰器而且它是 extendObservable(this, { property: value }) 的语法糖。

observable.box(value, options?)
创建一个 observable 的盒子，它用来存储value的 observable 引用。使用 get() 方法可以得到盒子中的当前value，而使用 set() 方法可以更新value。 这是所有其它 observable 创建的基础，但实际中你其实很少能使用到它。
通常盒子会自动地尝试把任何还不是 observable 的新值转换成 observable 。使用 {deep: false} 选项会禁用这项行为。
observable.box(value, { name: "my array" })
name 选项用来给数组一个友好的调试名称，用于 spy 或者 MobX 开发者工具。


observable.array
	•	clear() - 从数组中删除所有项。
	•	replace(newItems) - 用新项替换数组中所有已存在的项。
	•	find(predicate: (item, index, array) => boolean, thisArg?) - 基本上等同于 ES7 的 Array.find 提议。
	•	findIndex(predicate: (item, index, array) => boolean, thisArg?) - 基本上等同于 ES7 的 Array.findIndex 提议。
	•	remove(value) - 通过值从数组中移除一个单个的项。如果项被找到并移除的话，返回 true 。

不同于 sort 和 reverse 函数的内置实现，observableArray.sort 和 observableArray.reverse 不会改变数组本身，而只是返回一个排序过/反转过的拷贝。在 MobX 5 及以上版本中会出现警告。推荐使用 array.slice().sort() 来替代。

observable.map(values, options?)
下列 observable 映射所暴露的方法是依据 ES6 Map 规范:
	•	has(key) - 返回映射是否有提供键对应的项。注意键的存在本身就是可观察的。
	•	set(key, value) - 把给定键的值设置为 value 。提供的键如果在映射中不存在的话，那么它会被添加到映射之中。
	•	delete(key) - 把给定键和它的值从映射中删除。
	•	get(key) - 返回给定键的值(或 undefined)。
	•	keys() - 返回映射中存在的所有键的迭代器。插入顺序会被保留。
	•	values() - 返回映射中存在的所有值的迭代器。插入顺序会被保留。
	•	entries() - 返回一个(保留插入顺序)的数组的迭代器，映射中的每个键值对都会对应数组中的一项 [key, value]。
	•	forEach(callback:(value, key, map) => void, thisArg?) - 为映射中每个键值对调用给定的回调函数。
	•	clear() - 移除映射中的所有项。
	•	size - 返回映射中项的数量。
以下函数不属于 ES6 规范，而是由 MobX 提供:
	•	toJS() - 将 observable 映射转换成普通映射。
	•	toJSON(). 返回此映射的浅式普通对象表示。(想要深拷贝，请使用 mobx.toJS(map))。
	•	intercept(interceptor) - 可以用来在任何变化作用于映射前将其拦截。参见 observe & intercept。
	•	observe(listener, fireImmediately?) - 注册侦听器，在映射中的每个更改时触发，类似于为 Object.observe 发出的事件。想了解更多详情，请参见 observe & intercept。
	•	merge(values) - 把提供对象的所有项拷贝到映射中。values 可以是普通对象、entries 数组或者 ES6 字符串键的映射。
	•	replace(values) - 用提供值替换映射全部内容。是 .clear().merge(values) 的简写形式。


extendObservable
它是对现有的observe数据进行修剪，就是对数据在原有基础上进行约束。

extendObservable(target, properties, decorators?, options?)
ExtendObservable 用来向已存在的目标对象添加 observable 属性。 属性映射中的所有键值对都会导致目标上的新的 observable 属性被初始化为给定值。 属性映射中的任意 getters 都会转化成计算属性。
decorators 参数用来重载用于指定属性的装饰器，类似于 decorate 和 observable.object 。
使用 deep: false 选项可使得新的属性变成浅的。也就是说，阻止它们的值自动转换成 observables 。
注意: observable.object(object) 实际上是 extendObservable({}, object) 的别名。
注意: 类似于 extendObservable，decorate 用来为对象引入 observable 属性。不同之处在于 extendObservable 被设计为直接在目标实例上引入属性，其中 decorate 将它们引入原型; 可以直接将它传递给构造函数 (类)，也可以将其作为其他人的原型。
注意: 不能使用 extendObservable 来为 observable 数组或对象上引入新的属性。



引用可观察性
然后在某些情况下，不需要将对象转变成 observable 。 典型案例就是不可变对象，或者不是由你管理，而是由外部库管理的对象。 例如 JSX 元素、DOM 元素、像 History、window 这样的原生对象，等等。 对于这类对象，只需要存储引用而不用把它们转变成 observable 。
对于这些情况，可以使用 ref 调节器。它会确保创建 observable 属性时，只追踪引用而不会把它的值转变成 observable 。 示例:
class Message {
    @observable message = "Hello world"

    // 虚构的例子，如果 author 是不可变的，我们只需要存储一个引用，不应该把它变成一个可变的 observable 对象
    @observable.ref author = null
}


autorun 中的值必须要手动清理才行，这点和计算值是有所不同的。

@Computed
计算值的 setter
还可以为计算值定义 setter。注意这些 setters 不能用来直接改变计算属性的值，但是它们可以用来作“逆向”衍生。例如:
const orderLine = observable.object({
    price: 0,
    amount: 1,
    get total() {
        return this.price * this.amount
    },
    set total(total) {
        this.price = total / this.amount // 从 total 中推导出 price
    }
})

	•	requiresReaction: 对于非常昂贵的计算值，推荐设置成 true 。如果你尝试读取它的值，但某些观察者没有跟踪该值（在这种情况下，MobX 不会缓存该值），则会导致计算结果丢失，而不是进行昂贵的重新评估。

class Foo {
    @observable length = 2;
    @computed get squared() {
        return this.length * this.length;
    }
    set squared(value) { // 这是一个自动的动作，不需要注解
        this.length = Math.sqrt(value);
    }
}






何时使用动作？
应该永远只对修改状态的函数使用动作。 只执行查找，过滤器等函数不应该被标记为动作，以允许 MobX 跟踪它们的调用。

绑定的动作
action 装饰器/函数遵循 javascript 中标准的绑定规则。 但是，action.bound 可以用来自动地将动作绑定到目标对象。 注意，与 action 不同的是，(@)action.bound 不需要一个name参数，名称将始终基于动作绑定的属性。
示例:
class Ticker {
    @observable tick = 0

    @action.bound
    increment() {
        this.tick++ // 'this' 永远都是正确的
    }
}

const ticker = new Ticker()
setInterval(ticker.increment, 1000)

注意: action.bound 不要和箭头函数一起使用；箭头函数已经是绑定过的并且不能重新绑定。


Flow
用法: flow(function* (args) { })
flow() 接收 generator 函数作为它唯一的输入
当处理异步动作时，回调中执行的代码不会被 action 包装。这意味着你修改的 observable state 无法通过 enforceActions 检查。保留动作语义的简单方法是使用 flow 来包装异步函数。这将确保所有回调都会被 action() 包装。
注意，异步函数必须是 generator ，而且在内部只能 yield promises 。flow 会返回一个 promise ，需要的话可以使用 cancel() 进行撤销。
import { configure } from 'mobx';

// 不允许在动作外部修改状态
configure({ enforceActions: true });

class Store {
    @observable githubProjects = [];
    @observable state = "pending"; // "pending" / "done" / "error"


    fetchProjects = flow(function* fetchProjects() { // <- 注意*号，这是生成器函数！
        this.githubProjects = [];
        this.state = "pending";
        try {
            const projects = yield fetchGithubProjectsSomehow(); // 用 yield 代替 await
            const filteredProjects = somePreprocessing(projects);

            // 异步代码自动会被 `action` 包装
            this.state = "done";
            this.githubProjects = filteredProjects;
        } catch (error) {
            this.state = "error";
        }
    })
}
Copy
提示: 推荐为 generator 函数起个名称，此名称将出现在开发工具中
Flows 可以撤销
Flows 是可以取消的，这意味着调用返回的 promise 的 cancel() 方法。这会立即停止 generator ，但是 finally 子句仍会被处理。 返回的 promise 本身会使用 FLOW_CANCELLED 进行 reject 。
Flows 支持异步迭代器
Flows 支持异步迭代器，这意味着可以使用异步 generators :
async function* someNumbers() {
    yield Promise.resolve(1)
    yield Promise.resolve(2)
    yield Promise.resolve(3)
}

const count = mobx.flow(async function*() {
    // 使用 await 来循环异步迭代器
    for await (const number of someNumbers()) {
        total += number
    }
    return total
})

const res = await count() // 6
Copy


陷阱: 组件中的间接引用值
MobX 可以做很多事，但是它无法使原始数据类型值转变成可观察的(尽管它可以用对象来包装它们，参见 boxed observables)。 所以值是不可观察的，但是对象的属性可以。这意味着 @observer 实际上是对间接引用(dereference)值的反应。 那么在上面的示例中，如果是用下面这种方式初始化的，Timer 组件是不会有反应的:
React.render(<Timer timerData={timerData.secondsPassed} />, document.body)
Copy
在这个代码片段中只是把 secondsPassed 的当前值传递给了 Timer 组件，这个值是不可变值0(JS中所有的原始类型值都是不可变的)。 这个数值永远都不会改变，因此 Timer 组件不会更新。secondsPassed的值将来会发生改变， 所以我们需要在组件中访问它。或者换句话说: 值需要通过引用来传递而不是通过(字面量)值来传递。


可观察的局部组件状态
就像普通类一样，你可以通过使用 @observable 装饰器在React组件上引入可观察属性。 这意味着你可以在组件中拥有功能同样强大的本地状态(local state)，而不需要通过 React 的冗长和强制性的 setState 机制来管理。 响应式状态会被 render 提取调用，但不会调用其它 React 的生命周期方法，除了 componentWillUpdate 和 componentDidUpdate 。 如果你需要用到其他 React 生命周期方法 ，只需使用基于 state 的常规 React API 即可。
上面的例子还可以这样写:
import {observer} from "mobx-react"
import {observable} from "mobx"

@observer class Timer extends React.Component {
    @observable secondsPassed = 0

    componentWillMount() {
        setInterval(() => {
            this.secondsPassed++
        }, 1000)
    }

    render() {
        return (<span>Seconds passed: { this.secondsPassed } </span> )
    }
}

ReactDOM.render(<Timer />, document.body)


componentWillReact (生命周期钩子)
React 组件通常在新的堆栈上渲染，这使得通常很难弄清楚是什么导致组件的重新渲染。 当使用 mobx-react 时可以定义一个新的生命周期钩子函数 componentWillReact(一语双关)。当组件因为它观察的数据发生了改变，它会安排重新渲染，这个时候 componentWillReact 会被触发。这使得它很容易追溯渲染并找到导致渲染的操作(action)。
import {observer} from "mobx-react";

@observer class TodoView extends React.Component {
    componentWillReact() {
        console.log("I will re-render, since the todo has changed!");
    }

    render() {
        return <div>this.props.todo.title</div>;
    }
}
Copy
	•	componentWillReact 不接收参数
	•	componentWillReact 初始化渲染前不会触发 (使用 componentWillMount 替代)
	•	componentWillReact 对于 mobx-react@4+, 当接收新的 props 时并在 setState 调用后会触发此钩子


Autorun
 经验法则：如果你有一个函数应该自动运行，但不会产生一个新的值，请使用autorun，例如打印日志、持久化或者更新UI的代码
选项
Autorun 接收第二个参数，它是一个参数对象，有如下可选的参数:
	•	delay: 可用于对效果函数进行去抖动的数字(以毫秒为单位)。如果是 0(默认值) 的话，那么不会进行去抖。
	•	name: 字符串，用于在例如像 spy 这样事件中用作此 reaction 的名称。
	•	onError: 用来处理 reaction 的错误，而不是传播它们。
	•	scheduler: 设置自定义调度器以决定如何调度 autorun 函数的重新运行
一个全局的 onError 处理方法可以使用 onReactionError(handler) 来设置。这在测试或监控中很有用。



when
when(predicate: () => boolean, effect?: () => void, options?)
when 观察并运行给定的 predicate，直到返回true。 一旦返回 true，给定的 effect 就会被执行，然后 autorunner(自动运行程序) 会被清理。 该函数返回一个清理器以提前取消自动运行程序。
对于以响应式方式来进行处理或者取消，此函数非常有用。 示例:
class MyResource {
    constructor() {
        when(
            // 一旦...
            () => !this.isVisible,
            // ... 然后
            () => this.dispose()
        );
    }

    @computed get isVisible() {
        // 标识此项是否可见
    }

    dispose() {
        // 清理
    }
}



toJS
用法: toJS(observableDataStructure, options?) 。把 observable 数据结构转换成普通的 javascript 对象并忽略计算值。
options 包括:
	•	detectCycles: boolean: 检查 observalbe 数据结构中的循环引用。默认为 true
	•	exportMapsAsObjects: boolean: 将 ES6 Map 作为普通对象导出。默认为 true

isObservable 和 isObservableProp
用法: isObservable(thing) 或 isObservableProp(thing, property?) 。如果给定的 thing，或者 thing 指定的 property 是 observable 的话，返回 true。 适用于所有的 observable、计算值和 reaction 的清理函数。

isArrayLike
用法: isArrayLike(thing)。如果给定的 thing 是 javascript 数组或者 observable (MobX的)数组的话，返回 true。 这个方法更简便。 注意，observable 数组可以通过 .slice() 转变成 javascript 数组。
isAction
用法: isAction(func)。如果给定函数是用 action 方法包裹的或者是用 @action 装饰的话，返回 true。
isComputed 或 isComputedProp
用法: isComputed(thing) 或 isComputedProp(thing, property?) 。如果给定的 thing 是计算值或者 thing 指定的 property 是计算值的话，返回 true 。
intercept
用法: intercept(object, property?, interceptor). 这个 API 可以在应用 observable 的API之前，拦截更改。对于验证、标准化和取消等操作十分有用。


isolateGlobalState: boolean
当同一环境中有多个 MobX 实例时，将 MobX 的全局状态隔离。 当使用 MobX 的同时还使用了使用 MobX 的封装库时，这是非常有用的。 当在库中调用 configure({isolateGlobalState：true}) 时，库内的响应性将保持独立。
使用此选项，如果多个 MobX 实例正在使用的话，内部状态是会共享的。优点就是两个实例的 observables 可以协同运行，缺点是 MobX 的版本必须匹配。
configure({ isolateGlobalState: true });

